#!/usr/bin/env ruby

require 'optparse'

require_relative '../lib/pipeline'

require_relative '../lib/cfndsl'
require_relative '../lib/cfn_nag'
require_relative '../lib/options'
require_relative '../lib/params'
require_relative '../lib/syntax'
require_relative '../lib/monkey_patches'
require_relative '../lib/stdout_capture'
require_relative '../lib/version'

USAGE = "Usage: #{File.basename(__FILE__)} -t|--template file -o|--output dir"
cli_options = {}

pipe_options = CfnDslPipeline::Options.new

op = OptionParser.new do |opts|
  opts.banner = USAGE
  opts.on('-t', '--template file', 'Input file') do |v|
    cli_options[:template] = v
  end

  opts.on('-o', '--output dir', 'Output directory') do |v|
    cli_options[:output] = v
  end

  opts.on('-b', '--bucket', 'Existing S3 bucket for cost estimation and large template syntax validation') do |v|
    pipe_options[:validation_bucket] = v
  end

  opts.on('-s', '--syntax', 'Enable syntax check') do
    pipe_options[:validate_syntax] = true
  end

  opts.on('-p', '--params', 'Create cloudformation deploy compatible params file') do
    pipe_options[:dump_deploy_params] = true
  end

  opts.on('-n', '--nag', 'Enable cfn_nag ') do
    pipe_options[:validate_cfn_nag] = true
  end

  opts.on('-c', '--estimate', 'Generate URL for AWS simple cost calculator') do
    pipe_options[:validate_cfn_nag] = true
  end

  opts.on_tail('-h', '--help', 'show this message') do
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', 'show the version') do
    puts CfnDsl::Pipeline::VERSION
    exit
  end
end

op.parse!

 
unless cli_options[:template] && cli_options[:output]
  puts op
  exit 1
end

cfndsl_extras = false
ARGV.each do |arg|
  cfndsl_extras ||= [] << [:yaml, arg]
end if ARGV.length > 0

pipeline = CfnDslPipeline::Pipeline.new(cli_options[:output], pipe_options)
pipeline.build(cli_options[:template], cfndsl_extras)

